pipeline {
    agent none
    stages {
        stage('Run System Tests') {
            matrix {
                agent {
                    label "e2e"
                }
                axes {
                    axis {
                        name 'SUBSET'
                        values '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
                    }
                }
                stages {
                    stage('clone code') {
                        steps {
                            dir("kafka") {
                                deleteDir()
                                sh "git init && git remote add origin https://github.com/$ACCOUNT/kafka"
                                sh "git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +$REVISION:$REVISION"
                                sh "git switch $REVISION"
                            }
                        }
                    }
                    stage('down containers') {
                        steps {
                            dir("kafka") {
                                sh "./tests/docker/ducker-ak down -f"
                            }
                        }
                    }
                    stage('build code') {
                        steps {
                            dir("kafka") {
                                sh "./gradlew clean build -x test --build-cache"
                            }
                        }
                    }
                    stage('run tests') {
                        steps {
                            dir("kafka") {
                                script {
                                    TAG = sh(returnStdout: true, script: 'git rev-parse --short HEAD')
                                }
                                withEnv(["_DUCKTAPE_OPTIONS=--subsets 10 --subset ${SUBSET}"]) {
                                    warnError('test fails') {
                                        sh "image_name=ducker-ak:${TAG} ./tests/docker/run_tests.sh"
                                    }
                                }
                            }
                        }
                    }
                    stage('archive results') {
                        steps {
                            dir("kafka") {
                                sh "mv results results-subset-${SUBSET}"
                                archiveArtifacts artifacts: "results-subset-${SUBSET}/**"
                            }
                        }
                    }
                }
            }
        }
    }
}